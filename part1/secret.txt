FILE ADDED AND CHANGED

The GiftcardSite and the Database, two parts of the pod, were changed in this section. To use Kubernets' secret feature, configuration files were used. A django-secret.yaml file was added to Giftcard/k8(part1 folder) to contain the program's confidential information. 
A db-secret. yaml file was developed in db/k8 to protect the secrets in the mysql-container. Also, the django-deploy.yaml and db-deploy.yaml files were adjusted to each correspond with the newly inserted secret file.

Secret of DB
The MySQL ROOT PASSWORD was stored in plaintext without any encryption measures in the initial deployment yaml configuration in the database, 
which put sensitive data at risk of being exposed. So, this data was moved to the secure section of the database pod. The password was stored under the data label in the db-secret.yaml file after being encoded into base64 format (data: password: dGhpc2lzYXRlc3R0aGluZy4=)

To accommodate the modification done in secret, we need also adjust the deploy yaml. The valueFrom method with secretKeyRef was used in place of the original method value: thisisatestthing. In this instance, the name would be db-secret and the key would be the password under the name "MYSQL ROOT PASSWORD" because the secret configuration was given the name "db-secret" (metadata: name: db-secret) (key: password name: db-secret)

GiftcardSite's Secrets

Because MYSQL ROOT PASSWORD was stored as plaintext in the original deployment yaml for GiftcardSite, just like the database, we transferred it into db-secret.yaml using the same procedure. And to fit the secret settings, adjusted the name MYSQL ROOT PASSWORD to be the same as the database.

Make sure that the settings.py file is secure. When dealing with settings.py, there are two areas that require attention. The first is the DATABASES configuration, where the USER was originally hardcoded, which is sensitive data. Instead, it should be read from an environment variable with a secret. To accomplish this, create a name in the deployment yaml called MYSQL_ROOT_USERNAME and reference the secret value called username in django-secret.yaml. It was also observed that the NAME and PORT in DATABASES were hardcoded, although they were not considered sensitive data, they should still be loaded from environment variables. 
As a result, in django-deploy.yaml, MYSQL_PORT and MYSQL_DB were created, and these variables should be loaded from them.

To ensure the security of the settings.py file, there was another area that required attention, which was the SECRET_KEY. Since this was sensitive data, it needed to be stored as a secret. The default secret key was encoded into base64 and stored as a secret named secretkey. To load it from the environment, a DJANGO_SECRET_KEY was created in the deploy file and the secret key was loaded into the settings.py file using os.environ.get('DJANGO_SECRET_KEY').


To store multiple variables as secrets in each file, instead of using the command line as shown in this example:

kubectl create secret generic db-secret --from-literal='db-password=thisisatesting.'

The secrets were created from a YAML file in this assignment. All the files were stored in the part1/secrets folder. After applying the secrets, the pods were deployed using the following command:

kubectl apply -f <pod_path>

To make the submission clearer, all the secrets files were placed in the part1/secrets folder. Therefore, before running the apply command in db/k8 and GiftcardSite/k8, we needed to run the following command:

kubectl apply -f part1/secrets

This created the secrets first, without which we would have encountered an error since some environmental variables in the deployment were obtained from these secrets. With this command, the secrets were successfully applied.
When using the command:

kubectl get secrets

The result would show up: 

NAME            TYPE     DATA   AGE
db-secret       Opaque   1      33h
django-secret   Opaque   3      33h